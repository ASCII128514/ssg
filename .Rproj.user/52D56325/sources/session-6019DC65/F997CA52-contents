library(shiny)
library(ggplot2)

# source("ui.R")

smlt <- function(n, m, probs, st, e) {
  vec <- vector("integer", n * m * 100)
  cnt <- 1
  state <- st
  vec[cnt] <- st
  r <- ((state-1) %/% n)+1
  column <- (state-1) %% n + 1
  while (cnt <= n * m * 100  & state != e) {
    # simulate
    action <- sample(1:5, 1, prob=probs)
    cnt <- cnt + 1
    if (action == 1) {
      # move up
      if (r < m) {
        r <- r + 1
      }
      
    } else if (action == 2) {
      # move down
      if (r > 1) {
        r <- r - 1
      }
    } else if (action == 3) {
      # move left
      if (column > 1) {
        column <- column - 1
      }
    } else if (action == 4) {
      # move right
      if (column < n) {
        column <- column + 1
      }
    }
    
    # record the new state
    state <- (r-1)*n + column
    vec[cnt] <- state
  }
  return(vec)
}

makeGrid <- function(n, m, r, col, width, height) {
  
  if (r == 0) {
    return(tags$div("", class=paste0(n, ':',m), style="border: 1px solid; height:30px; width:30px; color: black; background: white"));
  }
  if ((n-col >= 0) & (n-col < width) & (m - r >= 0) & (m-r < height)) {
    return(tags$div("", class=paste0(n, ':',m), style="border: 1px solid; height:30px; width:30px; color: black; background: green"));
  }
    
    
  return(tags$div("", class=paste0(n, ':',m), style="border: 1px solid; height:30px; width:30px; color: black; background: white"));
}

getHtml <- function(n,m, pos, width, height) {
  r <- ((pos-1) %/% (n-width+1))+1
  column <- (pos-1) %% (n-width+1) + 1
  if (pos == 0) {
   r <- 0;
   column <- 0;
  }
  # create a div with n columns and m rows.
  # r-r+height, column-column+width
  # do.call(tags$div, append(list(style=paste0("grid-template-columns: repeat(",n , ", 1fr);")), lapply(1:(m*n), makeGrid)))
  tags$div(style="margin: 100px;", do.call(tags$div, append(list(style=paste0("grid-template-columns: repeat(10, 1fr);display:flex;")), lapply(1:n, function(x) do.call(tags$div, lapply(1:m, function(y) makeGrid(x,y, r, column, width, height)))))))
  
}

# Define server logic for slider examples ----
server <- function(input, output, session) {
  s <- reactiveVal(0)
  states <- reactiveVal()

  statplot <- reactiveVal(data.frame(iteration=1:10, y=replicate(10, 0)))
  
  observeEvent(input$start, {
    
    # simulate the game, store it into a vector.
    # visualize the steps and plot it in ggplot.

    probs <- c(input$up,input$down,input$left,input$right,input$hold)
    probs <- probs/sum(probs)
    states(smlt(input$n-2,input$m-1,probs, input$st, input$ed))
    s(1)
  })
  
  observeEvent(input$ns, {
    s(s()+1)
  })
  observeEvent(input$nss, {
    s(s()+10)
  })
  observeEvent(input$pv, {
    if (s() > 1) {
      s(s()-1)
    }
  })
  
  
  observeEvent(input$visual, {
    # simulate k number of iterations
    
    probs <- c(input$up,input$down,input$left,input$right,input$hold)
    probs <- probs/sum(probs)
    
    steps <- replicate(input$iter, sum(smlt(input$n-2,input$m-1,probs, input$st, input$ed) > 0))
    
    # make a plot
    
    statplot(data.frame(iteration=1:input$iter, y=steps))
  
  })
  
  
  
  output$simulation <- renderUI({
      # print(paste(states()))
      if (s() >= 1) {
        state <- states()
        return(getHtml(input$n, input$m, state[s()], 3, 2));
        # return(tags$ul(div(class='test', id='test', NULL, toString(states()))))
      }
      return(tags$ul(div(class='test', id='test', NULL, "Enter the parameters to start simulation.")))
      })

  
  
  output$Home <- renderUI({
    tags$div(
      tags$div(
        tags$h1("Summary"),
        tags$div("This is a simulator for the Smart Surface Game where each cell is an agent. Their joint action will determine the movement of the object."),
        tags$div("This game is an adaptation of the Smart Surface Game discussed by Martignon", tags$a("(Link)", href="https://hal.archives-ouvertes.fr/hal-00720669/document")),
        tags$div("This is a supplimental projecvt for ELBICA Lab 2022 project."),
        tags$div("In this app, users are able to explore the smart surface game with random action selection mechanism."),
        tags$div("By exploring this app, users will be able to gain a solid understanding for the Smart Surface Game and its perameters"),
        tags$figure(
          align = "center",
          tags$img(
            src = "smart-surface-figure.png",
            
          ),
        )
        
      )

    )
    
  })
  
  # output$ssg <- renderImage({
  #   img()
  # })
  
  output$visualstatistics <- renderPlot({
    df <- statplot()
    ggplot(data=df, aes(x=iteration, y=y, group=1)) +
      geom_line()+
      geom_point()+ylab("Steps used to complete")
  })
  output$visualstatisticsSorted <- renderPlot({
    df <- statplot()
    ggplot(data=df, aes(x=iteration, y=sort(y, decreasing = TRUE), group=1)) +
      geom_line()+
      geom_point()+ylab("Steps used to complete")
  })
  
  output$contact <- renderUI({
    tags$div("do not contact us", 
             
             tags$hr(),
             tags$h3("MIT License"),
             tags$div("Copyright 2022 Hanfeng Lu"),
             tags$div("Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:"),
             tags$div("The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."),
             tags$div("THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."))
  })
  
  
  output$acknow <- renderUI({
    tags$div(
      tags$div("I would like to thank Professor Fernanda Eliott and course mentor Jaechul Jung for the help I recieved."),
      tags$div("I would like to thank Mingi Lee for the image he created")
    )
  })
  
  
  output$sysdes <- renderUI({
    tags$div(
      "The System Design book helps me to make a easy to use user-interface by considering who is audience. By following the design outlined in the book, I am able to identify the key parts of the app and prioritize it accordingly."
    )
  })
}


# Create Shiny app ----
# shinyApp(ui, server)